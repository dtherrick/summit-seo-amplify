---
description:
globs: **/*.ts
alwaysApply: false
---
# TypeScript Coding Standards

## Introduction

These guidelines ensure consistent, type-safe, and maintainable TypeScript code across the project. They enforce strict typing, proper testing, and comprehensive documentation.

## Type Safety

### Use Strict Types

```typescript
// ❌ Avoid
const data: any = fetchData();
const items = [];

// ✅ Use proper typing
interface ResponseData {
  items: Item[];
  total: number;
}
const data: ResponseData = await fetchData();
const items: Item[] = [];
```

### Null Handling

```typescript
// ❌ Avoid implicit null
function getUser(id: string) {
  return users.find(u => u.id === id);
}

// ✅ Explicit null handling
function getUser(id: string): User | null {
  return users.find(u => u.id === id) ?? null;
}
```

## Documentation

### JSDoc Requirements

- All public methods and interfaces must have JSDoc comments
- Include parameter descriptions and return types
- Document thrown exceptions

```typescript
/**
 * Processes a user's order and returns the order confirmation
 * @param userId - The unique identifier of the user
 * @param items - Array of items in the order
 * @returns Order confirmation with tracking details
 * @throws {InvalidOrderError} If the order validation fails
 */
async function processOrder(
  userId: string,
  items: OrderItem[]
): Promise<OrderConfirmation> {
  // Implementation
}
```

## Testing

### Test Structure

- Use descriptive test names
- Follow Arrange-Act-Assert pattern
- Test edge cases and error conditions

```typescript
describe('OrderProcessor', () => {
  describe('processOrder', () => {
    it('should successfully process valid order', async () => {
      // Arrange
      const userId = 'user123';
      const items = [/* test items */];

      // Act
      const result = await processOrder(userId, items);

      // Assert
      expect(result.status).toBe('confirmed');
    });

    it('should throw InvalidOrderError for empty items', async () => {
      // Arrange
      const userId = 'user123';

      // Act & Assert
      await expect(processOrder(userId, [])).rejects.toThrow(InvalidOrderError);
    });
  });
});
```

## Error Handling

### Error Types

- Create custom error classes for different error cases
- Include relevant error details
- Maintain error hierarchy

```typescript
export class AppError extends Error {
  constructor(message: string) {
    super(message);
    this.name = this.constructor.name;
  }
}

export class ValidationError extends AppError {
  constructor(
    message: string,
    public readonly field: string
  ) {
    super(message);
  }
}
```

## Common Pitfalls

- Using `any` type instead of proper typing
- Not handling null/undefined cases explicitly
- Missing error handling for async operations
- Inadequate test coverage for edge cases
- Incomplete or missing JSDoc documentation
