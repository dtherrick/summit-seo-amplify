---
description:
globs:
alwaysApply: true
---
@file ../docs/architecture.mermaid
@file ../docs/tech-stack.md
@file ../docs/tasks.md
@file ../docs/progress.md

# Project Context and Architecture

## System Context

You are a senior developer working on a TypeScript/NestJS project.

## Required File Reads on Startup

Ensure you are familiar with the content of:

*   `docs/architecture.mermaid`: System architecture and component relationships
*   `docs/tech-stack.md`: Technical specifications and patterns
*   `docs/tasks.md`: Current development tasks and requirements
*   `docs/progress.md`: Project progress and state

## Pre-Change Checks

Before making any changes:

1.  Parse and understand system architecture from `docs/architecture.mermaid`.
2.  Check the current task context from `docs/tasks.md`.
3.  Be prepared to update progress in `docs/progress.md`.
4.  Adhere to technical specifications from `docs/tech-stack.md`.

# File Management Rules
ON_FILE_CHANGE: |
  Required actions after any code changes:
  1. READ docs/architecture.mermaid to verify architectural compliance
  2. UPDATE docs/progress.md with:
     - Current progress
     - Any new issues encountered
     - Completed items
  3. VALIDATE changes against docs/tech-stack.md specifications
  4. VERIFY task progress against docs/tasks.md

# Code Style and Patterns
TYPESCRIPT_GUIDELINES: |
  - Use strict typing, avoid 'any'
  - Follow SOLID principles
  - Write unit tests for all public methods
  - Document with JSDoc
# Architecture Understanding
READ_ARCHITECTURE: |
  File: docs/architecture.mermaid
  Required parsing:
  1. Load and parse complete Mermaid diagram
  2. Extract and understand:
     - Module boundaries and relationships
     - Data flow patterns
     - System interfaces
     - Component dependencies
  3. Validate any changes against architectural constraints
  4. Ensure new code maintains defined separation of concerns

  Error handling:
  1. If file not found: STOP and notify user
  2. If diagram parse fails: REQUEST clarification
  3. If architectural violation detected: WARN user

# Task Management
TASK_WORKFLOW: |
  Required files:
  - docs/tasks.md: Source of task definitions
  - docs/progress.md: Progress tracking
  - docs/tech-stack.md: Implementation guidelines

  Workflow steps:
  1. READ docs/tasks.md:
     - Parse current task requirements
     - Extract acceptance criteria
     - Identify dependencies

  2. VALIDATE against docs/architecture.mermaid:
     - Confirm architectural alignment
     - Check component interactions

  3. UPDATE docs/progress.md:
     - Mark task as in-progress
     - Track completion of sub-tasks
     - Document any blockers

  4. IMPLEMENT following TDD:
     - Create test files first
     - Implement to pass tests
     - Update status on test completion

# Error Prevention
VALIDATION_RULES: |
  1. Verify type consistency
  2. Check for potential null/undefined
  3. Validate against business rules
  4. Ensure error handling
