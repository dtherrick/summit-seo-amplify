[pytest]
# Test discovery and execution
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
asyncio_mode = auto

# Test selection markers
markers =
    unit: Unit tests
    integration: Integration tests
    api: API endpoint tests
    db: Database tests
    auth: Authentication tests
    slow: Tests that take longer to run
    smoke: Quick tests for basic functionality

# Environment settings
env =
    DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/test_db
    REDIS_URL=redis://localhost:6379/1
    SECRET_KEY=test_secret_key_123
    ENVIRONMENT=test
    LOG_LEVEL=DEBUG
    CORS_ORIGINS=["http://localhost:3000"]
    RATE_LIMIT_PER_SECOND=100

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Test execution
addopts = 
    --verbose
    --strict-markers
    --tb=short
    --cov=app
    --cov-report=term-missing
    --cov-report=html
    --cov-branch
    --no-cov-on-fail
    --maxfail=10
    --durations=10
    --durations-min=1.0
    --timeout=300
    -n auto

# Coverage settings
[coverage:run]
branch = True
source = app

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise NotImplementedError
    if __name__ == .__main__.:
    pass
    raise ImportError
    except ImportError:
    if TYPE_CHECKING:

# Show missing lines in coverage report
show_missing = True

# Fail if coverage is below this threshold
fail_under = 80

[coverage:html]
directory = coverage_html 